{#
    Copyright (c) 2023 Coalesce. All rights reserved.
This script and its associated documentation are confidential and proprietary to Coalesce.
Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
does not permit copying or modification for any other purpose.  
#}
{# == Node Type Version        : 1  == #}
{# == Node Type Name           : Dynamic Masking View == #}
{# == Node Type Description    : Dynamic Masking View node creates a view with masking policies applied to a column within a table or view == #}

{# Dynamic data masking policy location #}

{%if config.enableMasking%}
  {% set maskStorageLocationName = config.maskStorageLocationName|trim %}
  {% set dbmask =  ref_no_link(config.maskStorageLocationName, node.name).split('.')[0] %}
  {% set schmask =  ref_no_link(config.maskStorageLocationName, node.name).split('.')[1]%}
{%endif%}


{# Row access policy location #}
{%-if config.enablerowacessMasking%}
  {% set racessStorageLocationName = config.raccessStorageLocationName|trim %}
  {% set dbaccess =  ref_no_link(racessStorageLocationName, node.name).split('.')[0] %}
  {% set schaccess =  ref_no_link(racessStorageLocationName, node.name).split('.')[1]%}
{%endif%}

{# Override Masking sql #}

    {% set ns = namespace(column_masking=[],constraint='',raccol=[]) %} 

    {%if config.maskingOverride == true %}
 
      {% for item in config.ovmaskcolumn.get('items') %}
        {% set column_name = item.smaskcolumn.name %}
        {% set spolicyname = item.spolicyname %}

       {# Create a temporary dictionary for the current item #}
       {% set col_dict = {'name': column_name, 'masname': spolicyname} %}

       {# Append the dictionary to the list in the namespace #}
       {% set ns.column_masking = ns.column_masking + [col_dict] %}
      {% endfor %}          
 
    {%endif%}

    {#Row access policy column names #}

   {%-if config.enablerowacessMasking%}
     
     {% for item in config.racccolumn.get('items')%}
       {%- if loop.first -%}
        {%set ns.raccol = '"'+item.racccolumnname.name+'"' %}
       {%else%}
        {%set ns.raccol = ns.raccol + '","' +item.racccolumnname.name + '"'%}

       {%endif%}
     {%endfor%}
   {% endif %}

    {{ stage('Create Data Masking View') }}
    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
    (
        {% for col in columns %}
             {%set ns.masking = ''%}
             {%set ns.flag= false%}
            
            {# Check if col.name matches any name in column_constraints #}
            {% for item in ns.column_masking %}
              {% if item.name == col.name and ns.flag== false %}
                 {% set ns.masking = item.masname %}
                  {% set ns.flag = true %}  {# Stop the inner loop if match is found #}
               {% endif %}
            {% endfor %}

            "{{ col.name }}"
            {#Use the macro for column matches#}
            {%- if (config.enableMasking and maskingLookup(col.name) | trim == 'yes') and not config.maskingOverride  %} {{' MASKING POLICY'}} {{dbmask}}.{{schmask}}."{{config.selMaskPolicy}}"{%endif%}

            {#Override the Macro for column matches (self selection)#}
            {%- if config.enableMasking and config.maskingOverride and ns.masking %} {{' MASKING POLICY'}} {{dbmask}}.{{schmask}}."{{ns.masking}}" {%endif%}

            {% if col.description | length > 0 -%} COMMENT '{{ col.description | escape }}'{% endif %}
            {%- if not loop.last -%}, {% endif %}
        {% endfor %}
    )
    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'
     {% endif %}
     {%-if config.enablerowacessMasking%}
     WITH ROW ACCESS POLICY {{dbaccess}}.{{schaccess}}."{{config.rowaccessPolicy}}" ON({{ns.raccol}})
     {% endif %}
    AS
    {% for source in sources %}
        SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
        {% for col in source.columns %}
            {{ get_source_transform(col) }} AS "{{ col.name }}"
            {%- if not loop.last -%}, {% endif %}
        {% endfor %}
        {{ source.join }}
        {% if config.groupByAll %}
		       Group By All
	        {% endif %}
        {% if not loop.last %}
            {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                {{ config.insertStrategy }}
            {% else %}
                UNION
            {% endif %}
        {% endif %}
    {% endfor %}

